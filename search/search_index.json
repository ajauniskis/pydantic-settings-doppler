{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydantic Settings Doppler","text":"<p>Pydantic Settings for Doppler integration! This package provides a seamless way to load configuration values from Doppler into your Pydantic models. It leverages the power of Doppler's secrets management and Pydantic's settings management to make your application configuration secure and easy to use.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Secure: Fetch secrets directly from Doppler.</li> <li>Simple: Integrates seamlessly with Pydantic's <code>BaseSettings</code>.</li> <li>Flexible: Supports environment variable fallbacks and default values.</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>Install the package using <code>pip</code>:</p> <pre><code>pip install pydantic-settings-doppler\n</code></pre>"},{"location":"#usage","title":"\ud83d\udee0\ufe0f Usage","text":"<p>Here's a quick example to get you started:</p> <pre><code>from pydantic_settings import BaseSettings\nfrom pydantic_settings.sources import PydanticBaseSettingsSource\nfrom pydantic_settings_doppler import DopplerSettingsSource\n\n\nclass Settings(BaseSettings):\n    database_url: str\n    api_key: str\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            DopplerSettingsSource(\n                settings_cls,\n                token=\"your-doppler-token\",\n                project_id=\"your-project-id\",\n                config_id=\"your-config-id\",\n            ),\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n        )\n\n\n# Load settings\nsettings = Settings()\nprint(settings.database_url)\nprint(settings.api_key)\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>For more details, check out the Doppler documentation and Pydantic documentation.</p>"},{"location":"#contributing","title":"\ud83e\uddd1\u200d\ud83d\udcbb Contributing","text":"<p>Contributions are welcome! Feel free to open issues or submit pull requests.</p>"},{"location":"#license","title":"\u2696\ufe0f License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"configuration/","title":"Configuration \u2699\ufe0f","text":""},{"location":"configuration/#overview","title":"Overview \ud83c\udf1f","text":"<p>This document explains how to configure <code>pydantic-settings-doppler</code> to retrieve secrets from Doppler.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables \ud83c\udf0d","text":"<p>To use <code>DopplerSettingsSource</code>, you need to configure the following environment variables:</p> <ul> <li><code>DOPPLER_TOKEN</code>: Your Doppler access token. This is required to authenticate with the Doppler API.</li> <li><code>DOPPLER_PROJECT_ID</code>: The ID of your Doppler project. This identifies the project from which secrets will be retrieved.</li> <li><code>DOPPLER_CONFIG_ID</code>: The ID of your Doppler configuration. This specifies the configuration environment (e.g., development, staging, production).</li> </ul>"},{"location":"configuration/#example","title":"Example \u2705","text":"<p>Set the environment variables in your shell:</p> <pre><code>export DOPPLER_TOKEN=\"your-doppler-access-token\"\nexport DOPPLER_PROJECT_ID=\"your-project-id\"\nexport DOPPLER_CONFIG_ID=\"your-config-id\"\n</code></pre> <p>Alternatively, you can use a <code>.env</code> file:</p> <pre><code>DOPPLER_TOKEN=your-doppler-access-token\nDOPPLER_PROJECT_ID=your-project-id\nDOPPLER_CONFIG_ID=your-config-id\n</code></pre>"},{"location":"configuration/#direct-initialization","title":"Direct Initialization \ud83d\udee0\ufe0f","text":"<p>You can also pass the configuration values directly to <code>DopplerSettingsSource</code> when initializing it:</p> <pre><code>from pydantic_settings_doppler import DopplerSettingsSource\n\nsource = DopplerSettingsSource(\n    settings_cls=AppSettings,\n    token=\"your-doppler-token\",\n    project_id=\"your-project-id\",\n    config_id=\"your-config-id\",\n)\n</code></pre>"},{"location":"configuration/#error-handling","title":"Error Handling \ud83d\udea8","text":"<p>If a required field is not found in Doppler, a <code>ValidationError</code> will be raised. Ensure all required secrets are present in your Doppler configuration.</p> <p>If any of config variables are not found either in environment variables on not passed in the constructor, a <code>SettingsError</code> will be raised.</p>"},{"location":"configuration/#logging-configuration","title":"Logging Configuration \ud83d\udcdd","text":"<p><code>pydantic-settings-doppler</code> uses Python's <code>logging</code> module to provide debug and warning messages. To enable debug logging, configure the logger:</p> <pre><code>import logging\nfrom pydantic_settings_doppler.logger import logger\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger.setLevel(logging.DEBUG)\n</code></pre>"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration \ud83d\udd27","text":""},{"location":"configuration/#customizing-field-names","title":"Customizing Field Names","text":"<p>By default, <code>DopplerSettingsSource</code> uses the field name in uppercase as the key to retrieve secrets from Doppler. You can customize this behavior by setting the <code>alias</code> or <code>serialization_alias</code> attribute in your Settings model:</p> <pre><code>from pydantic import Field\nfrom pydantic_settings import BaseSettings\n\nclass AppSettings(BaseSettings):\n    db_url: str = Field(alias=\"DATABASE_URL\")  # (1)!\n    api_key: str  # (2)!\n</code></pre> <ol> <li>Maps the <code>db_url</code> field to the <code>DATABASE_URL</code> key in Doppler.</li> <li>Uses the default field name <code>API_KEY</code> in uppercase as the key.</li> </ol>"},{"location":"examples/","title":"Examples \ud83d\ude80","text":"<p>This document provides practical examples of how to use <code>pydantic-settings-doppler</code> in various scenarios.</p>"},{"location":"examples/#basic-example","title":"Basic Example \u2705","text":"<p>Retrieve secrets from Doppler and integrate them into a Pydantic settings model:</p> <pre><code>from pydantic_settings import BaseSettings, PydanticBaseSettingsSource\nfrom pydantic_settings_doppler import DopplerSettingsSource\n\nclass AppSettings(BaseSettings):\n    database_url: str\n    api_key: str\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            DopplerSettingsSource(\n                settings_cls,\n                token=\"your-doppler-token\",\n                project_id=\"your-project-id\",\n                config_id=\"your-config-id\",\n            ),\n        )\n\n# Instantiate the settings\nsettings = AppSettings()\nprint(settings.database_url)\nprint(settings.api_key)\n</code></pre>"},{"location":"examples/#using-environment-variables","title":"Using Environment Variables \ud83c\udf0d","text":"<p>Set the required environment variables and retrieve them using <code>DopplerSettingsSource</code>:</p> <pre><code>export DOPPLER_TOKEN=\"your-doppler-access-token\"\nexport DOPPLER_PROJECT_ID=\"your-project-id\"\nexport DOPPLER_CONFIG_ID=\"your-config-id\"\n</code></pre> <pre><code>from pydantic_settings import BaseSettings, PydanticBaseSettingsSource\nfrom pydantic_settings_doppler import DopplerSettingsSource\n\n\nclass AppSettings(BaseSettings):\n    database_url: str\n    api_key: str\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            DopplerSettingsSource(settings_cls),\n        )\n\n\nsettings = AppSettings()\nprint(settings.database_url)\nprint(settings.api_key)\n</code></pre>"},{"location":"examples/#direct-initialization","title":"Direct Initialization \u2699\ufe0f","text":"<p>Pass Doppler configuration values directly to <code>DopplerSettingsSource</code>:</p> <pre><code>from pydantic_settings import BaseSettings, PydanticBaseSettingsSource\nfrom pydantic_settings_doppler import DopplerSettingsSource\n\nclass AppSettings(BaseSettings):\n    database_url: str\n    api_key: str\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            DopplerSettingsSource(\n                settings_cls,\n                token=\"your-doppler-token\",\n                project_id=\"your-project-id\",\n                config_id=\"your-config-id\",\n            ),\n        )\n\nsettings = AppSettings()\nprint(settings.database_url)\nprint(settings.api_key)\n</code></pre>"},{"location":"examples/#error-handling-example","title":"Error Handling Example \ud83d\udea8","text":"<p>Handle missing required fields gracefully:</p> <pre><code>from pydantic import ValidationError\nfrom pydantic_settings import BaseSettings, PydanticBaseSettingsSource\nfrom pydantic_settings_doppler import DopplerSettingsSource\n\nclass AppSettings(BaseSettings):\n    database_url: str\n    api_key: str\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            DopplerSettingsSource(settings_cls),\n        )\n\ntry:\n    settings = AppSettings()\n    print(settings.database_url)\n    print(settings.api_key)\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"examples/#logging-example","title":"Logging Example \ud83d\udcdd","text":"<p>Enable debug logging to troubleshoot Doppler integration:</p> <pre><code>import logging\n\nfrom pydantic_settings import BaseSettings, PydanticBaseSettingsSource\nfrom pydantic_settings_doppler import DopplerSettingsSource\nfrom pydantic_settings_doppler.logger import logger\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger.setLevel(logging.DEBUG)\n\n\nclass AppSettings(BaseSettings):\n    database_url: str\n    api_key: str\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            DopplerSettingsSource(settings_cls),\n        )\n\n\nsettings = AppSettings()\nprint(settings.database_url)\nprint(settings.api_key)\n</code></pre>"},{"location":"examples/#summary","title":"Summary \u2728","text":"<p>These examples demonstrate how to configure and use <code>pydantic-settings-doppler</code> in various scenarios, including basic usage, environment variable integration, direct initialization, customization, error handling, and logging.</p>"}]}